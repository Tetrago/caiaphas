"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[917],{3905:(e,t,o)=>{o.d(t,{Zo:()=>d,kt:()=>m});var l=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function n(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,l)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?n(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):n(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function a(e,t){if(null==e)return{};var o,l,r=function(e,t){if(null==e)return{};var o,l,r={},n=Object.keys(e);for(l=0;l<n.length;l++)o=n[l],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(l=0;l<n.length;l++)o=n[l],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=l.createContext({}),p=function(e){var t=l.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},d=function(e){var t=p(e.components);return l.createElement(s.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},c=l.forwardRef((function(e,t){var o=e.components,r=e.mdxType,n=e.originalType,s=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),g=p(o),c=r,m=g["".concat(s,".").concat(c)]||g[c]||u[c]||n;return o?l.createElement(m,i(i({ref:t},d),{},{components:o})):l.createElement(m,i({ref:t},d))}));function m(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=o.length,i=new Array(n);i[0]=c;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[g]="string"==typeof e?e:r,i[1]=a;for(var p=2;p<n;p++)i[p]=o[p];return l.createElement.apply(null,i)}return l.createElement.apply(null,o)}c.displayName="MDXCreateElement"},6136:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>n,metadata:()=>a,toc:()=>p});var l=o(7462),r=(o(7294),o(3905));const n={sidebar_position:1},i="Logger",a={unversionedId:"modules/toolkit/logger",id:"modules/toolkit/logger",title:"Logger",description:"Creation",source:"@site/docs/modules/toolkit/logger.md",sourceDirName:"modules/toolkit",slug:"/modules/toolkit/logger",permalink:"/caiaphas/docs/modules/toolkit/logger",draft:!1,editUrl:"https://github.com/tetrago/caiaphas/tree/master/docs/docs/modules/toolkit/logger.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Toolkit",permalink:"/caiaphas/docs/category/toolkit"}},s={},p=[{value:"Creation",id:"creation",level:2},{value:"Options",id:"options",level:3},{value:"<code>toStdOut()</code>",id:"tostdout",level:4},{value:"<code>toFile(const std::filesystem::path&amp; path)</code>",id:"tofileconst-stdfilesystempath-path",level:4},{value:"Example",id:"example",level:3},{value:"Usage",id:"usage",level:2},{value:"Log Levels",id:"log-levels",level:3},{value:"Methods",id:"methods",level:3},{value:"<code>log(tk::LogLevel level, fmt::format_string fmt, ...)</code>",id:"logtkloglevel-level-fmtformat_string-fmt-",level:4},{value:"Explicit Logging Methods",id:"explicit-logging-methods",level:4},{value:"Examples",id:"examples",level:3},{value:"Basic",id:"basic",level:4},{value:"Type Formatting",id:"type-formatting",level:4},{value:"Remarks",id:"remarks",level:2}],d={toc:p},g="wrapper";function u(e){let{components:t,...o}=e;return(0,r.kt)(g,(0,l.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"logger"},"Logger"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <toolkit/logger.hpp>\n")),(0,r.kt)("h2",{id:"creation"},"Creation"),(0,r.kt)("p",null,"A logger is created using a ",(0,r.kt)("inlineCode",{parentName:"p"},"tk::Logger::Builder"),", which can be accessed via ",(0,r.kt)("inlineCode",{parentName:"p"},"tk::Logger::builder(std::string_view name)"),".\nAfter enablind the desiered output methods, you can call ",(0,r.kt)("inlineCode",{parentName:"p"},"build()")," to finalize and creaate the logger."),(0,r.kt)("h3",{id:"options"},"Options"),(0,r.kt)("h4",{id:"tostdout"},(0,r.kt)("inlineCode",{parentName:"h4"},"toStdOut()")),(0,r.kt)("p",null,"Will output colored messages directly to the terminal standard output using the name specified when building the logger."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The usage of ",(0,r.kt)("inlineCode",{parentName:"p"},"toStdOut()")," is not protected. It is possible to add multiple standard output loggers, resulting in duplicated messages being logged.")),(0,r.kt)("h4",{id:"tofileconst-stdfilesystempath-path"},(0,r.kt)("inlineCode",{parentName:"h4"},"toFile(const std::filesystem::path& path)")),(0,r.kt)("p",null,"Will send output to the file at the given path, also using the name previously specified."),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'tk::Logger logger = tk::Logger::builder("toolkit")\n    .toStdOut() // Print messages to the console\n    .toFile("toolkit.log") // In addition, log messages to the file "toolkit.log"\n    .build();\n')),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"log-levels"},"Log Levels"),(0,r.kt)("p",null,"Messages can be logged at various levels."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Trace"),(0,r.kt)("li",{parentName:"ul"},"Info"),(0,r.kt)("li",{parentName:"ul"},"Warn"),(0,r.kt)("li",{parentName:"ul"},"Error")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Trace is only enabled when compiled without the ",(0,r.kt)("inlineCode",{parentName:"p"},"NDEBUG")," preprocessor definition.")),(0,r.kt)("h3",{id:"methods"},"Methods"),(0,r.kt)("h4",{id:"logtkloglevel-level-fmtformat_string-fmt-"},(0,r.kt)("inlineCode",{parentName:"h4"},"log(tk::LogLevel level, fmt::format_string fmt, ...)")),(0,r.kt)("p",null,"When provided with a log level, this function will output the provided message through the configured loggers in accordance with ",(0,r.kt)("a",{parentName:"p",href:"https://fmt.dev/latest/syntax.html"},"fmt format strings"),"."),(0,r.kt)("h4",{id:"explicit-logging-methods"},"Explicit Logging Methods"),(0,r.kt)("p",null,"No different from calling ",(0,r.kt)("inlineCode",{parentName:"p"},"log")," with the appropriate log level; however, they are simpler to write."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"trace(fmt::format_string, ...)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"info(fmt::format_string, ...)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"warn(fmt::format_string, ...)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"error(fmt::format_string, ...)"))),(0,r.kt)("h3",{id:"examples"},"Examples"),(0,r.kt)("h4",{id:"basic"},"Basic"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'logger.trace("Creating window title \\"{}\\" with size {}x{}", title, width, height);\n')),(0,r.kt)("h4",{id:"type-formatting"},"Type Formatting"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'logger.error("Failed to create object with flags: {:b}", flags);\n')),(0,r.kt)("h2",{id:"remarks"},"Remarks"),(0,r.kt)("p",null,"The logger element of the toolkit is powered under the hood by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gabime/spdlog"},"spdlog"),"."))}u.isMDXComponent=!0}}]);